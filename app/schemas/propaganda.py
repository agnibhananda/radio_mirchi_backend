from pydantic import BaseModel, Field
from typing import List, Optional
from uuid import UUID, uuid4

class Speaker(BaseModel):
    """Defines a speaker in the radio show."""
    name: str
    gender: str
    role: str
    background: str

class PropagandaGenerationResult(BaseModel):
    """Schema for the data directly generated by the LLM in Stage 1."""
    summary: str
    proof_sentences: List[str] = Field(..., description="A few sentences that are secret proofs that the topic is a propaganda. These statements/statistics are actively being suppressed by the government.")
    speakers: List[Speaker] = Field(..., min_length=1, max_length=4)
    initial_listeners: int

class DialogueLine(BaseModel):
    """Represents a single line of dialogue from a speaker."""
    speaker_name: str
    line: str

class DialogueTurn(BaseModel):
    """
    Represents a turn in the conversation, including dialogue and its impact.
    This is the expected structured response for dialogue generation.
    """
    dialogues: List[DialogueLine]
    awakened_listeners_change: float = Field(..., description="Percentage change in awakened listeners. Can be positive, negative, or zero.")

class PropagandaMission(BaseModel):
    """Schema for the full mission object stored in MongoDB."""
    id: UUID = Field(default_factory=uuid4)
    user_id: str
    topic: str
    status: str = "stage1"
    generation_result: PropagandaGenerationResult
    dialogue_generator_prompt: Optional[str] = None # The dynamic part of the prompt, generated in Stage 2.

class PropagandaCreateRequest(BaseModel):
    """Request model for creating a new propaganda mission."""
    topic: str
    user_id: str